import 'package:flutter/material.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:intl/intl.dart';
import 'package:location/location.dart';
import 'package:device_info_plus/device_info_plus.dart';
import 'package:smartroll/Screens/manual_marking_dialouge.dart';
import 'dart:io';
import 'splash_screen.dart';
import 'error_screen.dart';
// import 'manual_marking_dialog.dart';

const String _backendBaseUrl = "https://smartroll.mnv-dev.site";

class AttendanceMarkingScreen extends StatefulWidget {
  const AttendanceMarkingScreen({super.key});

  @override
  State<AttendanceMarkingScreen> createState() =>
      _AttendanceMarkingScreenState();
}

class _AttendanceMarkingScreenState extends State<AttendanceMarkingScreen> {
  final FlutterSecureStorage _storage = const FlutterSecureStorage();
  final Location _location = Location();

  bool _isLoadingTimetable = true;
  bool _isMarkingAttendance = false;
  String? _fetchErrorMessage;
  List<dynamic> _timetableData = [];
  String? _deviceId;
  Map<String, bool> _markingStates = {};

  @override
  void initState() {
    super.initState();
    _initializeAndFetchData();
  }

  Future<void> _initializeAndFetchData() async {
    await _getAndStoreDeviceId();
    await _fetchTimetableData();
  }

  Future<void> _getAndStoreDeviceId() async {
    final deviceInfo = DeviceInfoPlugin();
    try {
      if (Platform.isAndroid) {
        _deviceId = (await deviceInfo.androidInfo).id;
      } else if (Platform.isIOS) {
        _deviceId = (await deviceInfo.iosInfo).identifierForVendor;
      }
    } catch (e) {
      debugPrint("Error getting device ID: $e");
      _showSnackbar(
        'Could not get device identifier. Attendance marking might fail.',
        isError: true,
      );
    }
  }

  Future<void> _fetchTimetableData({bool showLoading = true}) async {
    if (showLoading && mounted) {
      setState(() {
        _isLoadingTimetable = true;
        _fetchErrorMessage = null;
      });
    }

    // final accessToken = await _storage.read(key: 'accessToken');
    final accessToken =
        "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzQzNzkwMjU1LCJpYXQiOjE3NDM2MTc0NTUsImp0aSI6IjczMWZlY2RiZDdkZDQyMjhiNzI5MDEyMGVmMDQxZGVjIiwidXNlcl9pZCI6MTkyOSwib2JqIjp7InNsdWciOiIyNzU3NzNfMTczMTMwODQ5MSIsInByb2ZpbGUiOnsibmFtZSI6IlNoYWggTWFuYXYgS2F1c2hhbGt1bWFyIiwiZW1haWwiOiIyMmNzbWFuMDMzQGxkY2UuYWMuaW4iLCJyb2xlIjoic3R1ZGVudCJ9LCJzcl9ubyI6MjYsImVucm9sbG1lbnQiOiIyMjAyODMxMDcwMzMiLCJicmFuY2giOnsiYnJhbmNoX25hbWUiOiJURVNUX0JSQU5DSF9GT1JfQ09SRV9URUFNIiwic2x1ZyI6IjU1NmE3OGRhOTRiOTQ3MGVfMTczMjQ3MjY3NTMwNCJ9fX0.p01YPVUyKfqKuYuLtLc3H6N8Pgjk7d51DME0sp_pNgY";
    if (accessToken == null || accessToken.isEmpty) {
      _handleCriticalError("Authentication token missing.");
      return;
    }

    try {
      final response = await http.get(
        Uri.parse('$_backendBaseUrl/api/manage/get_timetable_for_student'),
        headers: {'Authorization': 'Bearer $accessToken'},
      );

      if (!mounted) return;

      if (response.statusCode == 200) {
        final decodedBody = jsonDecode(response.body);
        if (decodedBody['error'] == false && decodedBody['data'] is List) {
          setState(() {
            _timetableData = decodedBody['data'];
            _fetchErrorMessage = null;
          });
        } else {
          throw Exception(decodedBody['message'] ?? 'Failed to parse data');
        }
      } else if (response.statusCode == 401 || response.statusCode == 403) {
        _handleCriticalError('Authentication failed. Please restart the app.');
      } else {
        throw Exception('Failed to load timetable (${response.statusCode})');
      }
    } catch (e) {
      _handleFetchError("Could not fetch timetable: ${e.toString()}");
    } finally {
      if (mounted) {
        setState(() {
          _isLoadingTimetable = false;
        });
      }
    }
  }

  Future<LocationData?> _getCurrentLocation() async {
    bool serviceEnabled = await _location.serviceEnabled();
    if (!serviceEnabled) {
      serviceEnabled = await _location.requestService();
      if (!serviceEnabled) {
        _showSnackbar('Location services are disabled.', isError: true);
        return null;
      }
    }

    var permission = await _location.hasPermission();
    if (permission == PermissionStatus.denied) {
      permission = await _location.requestPermission();
      if (permission != PermissionStatus.granted) {
        _showSnackbar('Location permission denied.', isError: true);
        return null;
      }
    }

    try {
      await _location.changeSettings(accuracy: LocationAccuracy.high);
      return await _location.getLocation();
    } catch (e) {
      _showSnackbar('Could not get location: ${e.toString()}', isError: true);
      return null;
    }
  }

  Future<void> _handleMarkAttendance(dynamic lecture, {String? reason}) async {
    final String lectureSlug = lecture['slug'];
    if (_markingStates[lectureSlug] == true) return;

    setState(() {
      _markingStates[lectureSlug] = true;
    });

    try {
      final locationData = await _getCurrentLocation();
      if (!mounted || locationData == null) {
        setState(() {
          _markingStates[lectureSlug] = false;
        });
        return;
      }

      // final accessToken = await _storage.read(key: 'accessToken');
      final accessToken =
          "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNzQzNzkwMjU1LCJpYXQiOjE3NDM2MTc0NTUsImp0aSI6IjczMWZlY2RiZDdkZDQyMjhiNzI5MDEyMGVmMDQxZGVjIiwidXNlcl9pZCI6MTkyOSwib2JqIjp7InNsdWciOiIyNzU3NzNfMTczMTMwODQ5MSIsInByb2ZpbGUiOnsibmFtZSI6IlNoYWggTWFuYXYgS2F1c2hhbGt1bWFyIiwiZW1haWwiOiIyMmNzbWFuMDMzQGxkY2UuYWMuaW4iLCJyb2xlIjoic3R1ZGVudCJ9LCJzcl9ubyI6MjYsImVucm9sbG1lbnQiOiIyMjAyODMxMDcwMzMiLCJicmFuY2giOnsiYnJhbmNoX25hbWUiOiJURVNUX0JSQU5DSF9GT1JfQ09SRV9URUFNIiwic2x1ZyI6IjU1NmE3OGRhOTRiOTQ3MGVfMTczMjQ3MjY3NTMwNCJ9fX0.p01YPVUyKfqKuYuLtLc3H6N8Pgjk7d51DME0sp_pNgY";
      if (accessToken == null || accessToken.isEmpty) {
        _handleCriticalError("Authentication token missing.");
        return;
      }

      final String url =
          reason != null
              ? '$_backendBaseUrl/api/manage/session/mark_for_regulization/'
              : '$_backendBaseUrl/api/manage/session/mark_attendance_for_student/';

      final Map<String, dynamic> requestBody = {
        'lecture_slug': lectureSlug,
        'device_id': base64Encode(utf8.encode(_deviceId ?? '')),
        if (reason != null) 'regulization_comment': reason,
        if (reason == null) ...{
          'latitude': locationData.latitude,
          'longitude': locationData.longitude,
        },
      };

      final response = await http.post(
        Uri.parse(url),
        headers: {
          'Authorization': 'Bearer $accessToken',
          'Content-Type': 'application/json',
        },
        body: jsonEncode(requestBody),
      );

      if (!mounted) return;

      if (response.statusCode == 200) {
        final responseData = jsonDecode(response.body);
        if (responseData['data'] == true && responseData['code'] == 100) {
          _showSnackbar('Attendance marked successfully!', isError: false);
          await _fetchTimetableData(showLoading: false);
        } else {
          throw Exception(
            responseData['message'] ?? 'Failed to mark attendance',
          );
        }
      } else {
        throw Exception('Server error: ${response.statusCode}');
      }
    } catch (e) {
      _showSnackbar(
        'Failed to mark attendance: ${e.toString()}',
        isError: true,
      );
    } finally {
      if (mounted) {
        setState(() {
          _markingStates[lectureSlug] = false;
        });
      }
    }
  }

  void _showManualMarkingDialog(dynamic lecture) {
    final subjectName =
        lecture['subject']?['subject_map']?['subject_name'] ??
        'Unknown Subject';
    showDialog(
      context: context,
      builder:
          (context) => ManualMarkingDialog(
            subjectName: subjectName,
            onSubmit:
                (reason) => _handleMarkAttendance(lecture, reason: reason),
          ),
    );
  }

  void _handleLogout() async {
    await _storage.deleteAll();
    if (mounted) {
      Navigator.pushAndRemoveUntil(
        context,
        MaterialPageRoute(builder: (context) => const SplashScreen()),
        (route) => false,
      );
    }
  }

  void _handleFetchError(String message) {
    if (mounted) {
      setState(() {
        _fetchErrorMessage = message;
        _isLoadingTimetable = false;
      });
    }
  }

  void _handleCriticalError(String message) {
    if (mounted) {
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (context) => ErrorScreen(message: message)),
      );
    }
  }

  void _showSnackbar(String message, {bool isError = true}) {
    if (mounted) {
      ScaffoldMessenger.of(context).hideCurrentSnackBar();
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor:
              isError ? Colors.red.shade700 : Colors.green.shade700,
          behavior: SnackBarBehavior.floating,
        ),
      );
    }
  }

  String _formatTime(String timeString) {
    try {
      final parsedTime = DateFormat("HH:mm:ss").parse(timeString);
      return DateFormat("h:mm a").format(parsedTime);
    } catch (e) {
      return timeString;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'SMARTROLL',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                letterSpacing: 1.2,
              ),
            ),
            Text(
              'Attendance Management',
              style: TextStyle(
                fontSize: 14,
                color: Colors.grey[400],
                fontWeight: FontWeight.w400,
              ),
            ),
          ],
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _isLoadingTimetable ? null : () => _fetchTimetableData(),
          ),
          IconButton(icon: const Icon(Icons.logout), onPressed: _handleLogout),
        ],
      ),
      body: _buildBody(),
    );
  }

  Widget _buildBody() {
    if (_isLoadingTimetable) {
      return const Center(
        child: CircularProgressIndicator(
          color: Colors.blueAccent,
          strokeWidth: 3,
        ),
      );
    }

    if (_fetchErrorMessage != null) {
      return Center(
        child: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(Icons.error_outline, size: 48, color: Colors.red[400]),
              const SizedBox(height: 16),
              Text(
                _fetchErrorMessage!,
                textAlign: TextAlign.center,
                style: const TextStyle(fontSize: 16, color: Colors.white70),
              ),
              const SizedBox(height: 24),
              ElevatedButton.icon(
                onPressed: _fetchTimetableData,
                icon: const Icon(Icons.refresh),
                label: const Text('Retry'),
                style: ElevatedButton.styleFrom(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 24,
                    vertical: 12,
                  ),
                ),
              ),
            ],
          ),
        ),
      );
    }

    if (_timetableData.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.event_busy, size: 48, color: Colors.grey[600]),
            const SizedBox(height: 16),
            Text(
              'No lectures scheduled for today',
              style: TextStyle(
                fontSize: 18,
                color: Colors.grey[400],
                fontWeight: FontWeight.w500,
              ),
            ),
          ],
        ),
      );
    }

    return ListView.builder(
      padding: const EdgeInsets.symmetric(vertical: 10),
      itemCount: _timetableData.length,
      itemBuilder: (context, index) {
        final streamGroup = _timetableData[index];
        final branchName =
            streamGroup['stream']?['branch']?['branch_name'] ??
            'Unknown Branch';
        final timetables = streamGroup['timetables'] as List<dynamic>? ?? [];

        List<dynamic> lectures = [];
        for (var timetable in timetables) {
          final schedule = timetable['schedule'] as Map<String, dynamic>?;
          if (schedule != null) {
            lectures.addAll(schedule['lectures'] as List<dynamic>? ?? []);
          }
        }

        if (lectures.isEmpty) {
          return Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 2),
            child: Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      branchName,
                      style: const TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'No lectures scheduled for today',
                      style: TextStyle(color: Colors.grey[400], fontSize: 14),
                    ),
                  ],
                ),
              ),
            ),
          );
        }

        return Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 8),
              child: Row(
                children: [
                  Container(
                    width: 4,
                    height: 24,
                    decoration: BoxDecoration(
                      color: Colors.blueAccent,
                      borderRadius: BorderRadius.circular(2),
                    ),
                  ),
                  const SizedBox(width: 8),
                  Text(
                    branchName,
                    style: const TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                ],
              ),
            ),
            ListView.builder(
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              itemCount: lectures.length,
              itemBuilder: (context, lectureIndex) {
                return _buildLectureCard(lectures[lectureIndex]);
              },
            ),
            const SizedBox(height: 16),
          ],
        );
      },
    );
  }

  Widget _buildLectureCard(dynamic lecture) {
    final String lectureSlug = lecture['slug'];
    final bool isMarked = lecture['attendance_marked'] ?? false;
    final bool isMarking = _markingStates[lectureSlug] ?? false;
    final String subjectName =
        lecture['subject']?['subject_map']?['subject_name'] ??
        'Unknown Subject';
    final String subjectCode =
        lecture['subject']?['subject_map']?['subject_code'] ?? '';
    final String teacherName = lecture['teacher'] ?? 'N/A';
    final String classroom = lecture['classroom']?['class_name'] ?? 'N/A';
    final String lectureType = lecture['type']?.toString().toUpperCase() ?? '';

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: Card(
        elevation: 4,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
          side: BorderSide(color: Colors.grey[850]!, width: 2),
        ),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          subjectName,
                          style: const TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                        if (subjectCode.isNotEmpty) ...[
                          const SizedBox(height: 4),
                          Text(
                            subjectCode,
                            style: TextStyle(
                              fontSize: 14,
                              color: Colors.grey[400],
                            ),
                          ),
                        ],
                      ],
                    ),
                  ),
                  if (isMarked)
                    Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 12,
                        vertical: 6,
                      ),
                      decoration: BoxDecoration(
                        color: Colors.green[700],
                        borderRadius: BorderRadius.circular(20),
                      ),
                      child: const Text(
                        'Marked',
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 12,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ),
                ],
              ),
              const SizedBox(height: 12),
              Row(
                children: [
                  Icon(Icons.access_time, size: 16, color: Colors.grey[400]),
                  const SizedBox(width: 8),
                  Text(
                    '${_formatTime(lecture['start_time'])} - ${_formatTime(lecture['end_time'])}',
                    style: TextStyle(color: Colors.grey[300], fontSize: 14),
                  ),
                ],
              ),
              const SizedBox(height: 8),
              Row(
                children: [
                  Icon(Icons.person_outline, size: 16, color: Colors.grey[400]),
                  const SizedBox(width: 8),
                  Text(
                    teacherName,
                    style: TextStyle(color: Colors.grey[300], fontSize: 14),
                  ),
                ],
              ),
              const SizedBox(height: 8),
              Row(
                children: [
                  Icon(
                    Icons.location_city_outlined,
                    size: 16,
                    color: Colors.grey[400],
                  ),
                  const SizedBox(width: 8),
                  Text(
                    classroom,
                    style: TextStyle(color: Colors.grey[300], fontSize: 14),
                  ),
                  if (lectureType.isNotEmpty) ...[
                    const Spacer(),
                    Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 8,
                        vertical: 4,
                      ),
                      decoration: BoxDecoration(
                        color: Colors.blue[900],
                        borderRadius: BorderRadius.circular(4),
                      ),
                      child: Text(
                        lectureType,
                        style: const TextStyle(
                          color: Colors.white,
                          fontSize: 12,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ),
                  ],
                ],
              ),
              if (!isMarked) ...[
                const SizedBox(height: 16),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    ElevatedButton(
                      onPressed:
                          isMarking
                              ? null
                              : () => _handleMarkAttendance(lecture),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.white,
                        foregroundColor: Colors.black,
                        padding: const EdgeInsets.symmetric(
                          horizontal: 12,
                          vertical: 12,
                        ),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                      child:
                          isMarking
                              ? const SizedBox(
                                width: 20,
                                height: 20,
                                child: CircularProgressIndicator(
                                  strokeWidth: 2,
                                  valueColor: AlwaysStoppedAnimation<Color>(
                                    Colors.white,
                                  ),
                                ),
                              )
                              : const Text(
                                'Mark Attendance',
                                style: TextStyle(
                                  fontSize: 14,
                                  fontWeight: FontWeight.w600,
                                ),
                              ),
                    ),
                    // const SizedBox(width: 12),
                    ElevatedButton(
                      onPressed:
                          isMarking
                              ? null
                              : () => _showManualMarkingDialog(lecture),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.blue[800],
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(
                          horizontal: 12,
                          vertical: 12,
                        ),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                      child: const Text(
                        'Manual Marking',
                        style: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ],
          ),
        ),
      ),
    );
  }
}
